//wyatt Emery
//COSC 4740 Spring 2017
//2-7-17
//Psuedocode for program2 scheduler

Commander:
  open pipes
  fork
  start process manager

close read pipe  

loop until T command
  read in line of data from stdin
  pass data to process manager via pipe)

wait on process manager
--------------------------------------------------------------------------------
ProcessManager:
-------
struct PcbTable
{
    int pid; //no change
    int priority;
    int QuantumCount; //keeps count of how long it has run with current priority will be reset each time it's pulled off
    int value; 
    int startTime; //no change
    int runTime;//no change
    int totalCPUTime; 
};
---------
int time;
QueueArray<int> ReadyState; 4 queues corresponding to priorities
struct BlockedState i think i could do as class??
{
  QueueArray<int> resource1; 4 queues corresponding to priorities
  QueueArray<int> resource2; 4 queues corresponding to priorities
  QueueArray<int> resource3; 4 queues corresponding to priorities
}

int RunningState;
vector<PcbTable> processes
---------

ProcessManager code:
  set up pipes
  close write pipe

Parse Input from pipe:use switch statement
if first char is S:
  read until whitespace to get pid
  read until whitespace to get value
  read until whitespace/end to get runtime 
  
  pointer = construct a new PcbTable object
  priority 0, start time = current time

if first char is B:
  read until end to get rid

  stop currently running process
  increase priority by 1
  reset quantum
  add it to block state for correct resource and priority
  run scheduling algorithm

if first char is U:
  read until end to get rid
  dequeue from queuearray of specified rid
  add the pcb index to readyqueue 

if first char is Q:
  incrementTime
  run scheduling algorithm to pick next process to run or leave current process on

if first char is C:
  read until whitespace to get cmd
  read until end to get num
  call methodC
  IncrementTime
  run schediling algorithm

if first char is P:
  create pipe for reporter
  spawn reporter

  write time to pipe
  write running process to pipe
  qstate blocked processes resource 0 then 1 then 2
  write each pcbtable into pipe
  do same for readyQueue
  wait on reporter, Later consider a nohang wait to save time.

if first char is T:
  print average turnaround time
  clean up stuff
  exit
----------
Methods for ProcessManager:
----
method scheduling algorithm:
will decide to keep or remove current process based on Quantum, as well as select next
process to run from readyqueue 
if(there is a process currently running)
  if(full quantum)
    remove process from running/ add to ready queue
    lower priority by 1 
    reset quantum
  
if(if no process running)
  select next process from readyQueue with dequeue(highest priority)
  put it on processor
------
Method incrementTime:
  increment time
  increment quantumCount for current running process
  increment total CPU time for current running process
------
Method cmdC:
refer to instrucitons for operations.
--------------------------------------------------------------------------------
Reporter:

read in time from pipe (int)
read in running process PCBTable
loop: until "end"
  read in PCBTable for blocked process for rid 0.
  print out PCBTable
loop: until "end"
  read in PCBTable for blocked process for rid 1.
  print out PCBTable
loop: until "end"
  read in PCBTable for blocked process for rid 2.
  print out PCBTable
do same for ready state queue for priorities

close pipes 
quit

-----------------------------------------------------------------------

